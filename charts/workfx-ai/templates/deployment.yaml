apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "workfx-ai.fullname" . }}
  labels:
    {{- include "workfx-ai.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "workfx-ai.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        # Force pod restart on config changes
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "workfx-ai.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "workfx-ai.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.global.imageRegistry | default "docker.io" }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          env:
            # Basic application configuration
            - name: ENV
              value: {{ .Values.config.environment | quote }}
            - name: ENABLE_OPTEL
              value: {{ .Values.config.enableOtel | quote }}
            - name: OTEL_SERVICE_NAME
              value: {{ .Values.config.otelServiceName | quote }}
            - name: CLOUD_TYPE
              value: {{ .Values.config.cloudProvider | quote }}
            - name: KA_NAME
              value: {{ .Values.config.kaName | quote }}
            
            # Application Insights
            {{- if .Values.config.applicationInsightsConnectionString }}
            - name: APPLICATIONINSIGHTS_CONNECTION_STRING
              value: {{ .Values.config.applicationInsightsConnectionString | quote }}
            {{- end }}
            
            # Database configuration
            {{- if .Values.database.external }}
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "workfx-ai.secretName" . }}
                  key: database-url
            {{- else }}
            - name: DATABASE_HOST
              value: {{ .Values.database.host | quote }}
            - name: DATABASE_PORT
              value: {{ .Values.database.port | quote }}
            - name: DATABASE_NAME
              value: {{ .Values.database.name | quote }}
            - name: DATABASE_USER
              value: {{ .Values.database.user | quote }}
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "workfx-ai.secretName" . }}
                  key: database-password
            {{- end }}
            
            # Redis configuration
            {{- if .Values.redis.external }}
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "workfx-ai.secretName" . }}
                  key: redis-url
            {{- else }}
            - name: REDIS_HOST
              value: {{ .Values.redis.host | quote }}
            - name: REDIS_PORT
              value: {{ .Values.redis.port | quote }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "workfx-ai.secretName" . }}
                  key: redis-password
            {{- end }}
            
            # Azure-specific configuration
            {{- if eq .Values.config.cloudProvider "azure" }}
            - name: AZURE_TENANT_ID
              value: {{ .Values.azure.tenantId | quote }}
            - name: AZURE_KEYVAULT_URL
              value: {{ .Values.azure.keyVaultUrl | quote }}
            - name: AKS_MANAGED_IDENTITY
              value: {{ .Values.azure.aksManagedIdentity | quote }}
            - name: STORAGE_TYPE
              value: {{ .Values.azure.storage.type | quote }}
            - name: STORAGE_BUCKET_URI_PATH
              value: {{ .Values.azure.storage.bucketUriPath | quote }}
            - name: STORAGE_ADMIN_BUCKET_NAME
              value: {{ .Values.azure.storage.adminBucketName | quote }}
            - name: STORAGE_USER_BUCKET_NAME
              value: {{ .Values.azure.storage.userBucketName | quote }}
            - name: STORAGE_PUBLIC_BUCKET_NAME
              value: {{ .Values.azure.storage.publicBucketName | quote }}
            - name: STORAGE_TOOLS_IMAGE_BUCKET_NAME
              value: {{ .Values.azure.storage.toolsImageBucketName | quote }}
            {{- end }}
            
            # Model configuration
            - name: EMBEDDING_MODEL_PROVIDER
              value: {{ .Values.models.embedding.provider | quote }}
            - name: EMBEDDING_MODEL_NAME
              value: {{ .Values.models.embedding.name | quote }}
            - name: RERANK_MODEL_PROVIDER
              value: {{ .Values.models.rerank.provider | quote }}
            - name: RERANK_MODEL_NAME
              value: {{ .Values.models.rerank.name | quote }}
            
          envFrom:
            # Application secrets
            - secretRef:
                name: {{ include "workfx-ai.secretName" . }}
            # Azure authentication (if using Azure)
            {{- if eq .Values.config.cloudProvider "azure" }}
            - secretRef:
                name: azure-auth-secret
            {{- end }}
            # Additional config from ConfigMap
            - configMapRef:
                name: {{ include "workfx-ai.fullname" . }}-config
          
          {{- if .Values.probes.liveness.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.probes.liveness.path }}
              port: {{ .Values.probes.liveness.port }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
            successThreshold: {{ .Values.probes.liveness.successThreshold }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
          {{- end }}
          
          {{- if .Values.probes.readiness.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.probes.readiness.path }}
              port: {{ .Values.probes.readiness.port }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            successThreshold: {{ .Values.probes.readiness.successThreshold }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
          {{- end }}
          
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
