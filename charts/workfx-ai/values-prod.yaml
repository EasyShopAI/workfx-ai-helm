# Production environment configuration for WorkFX AI Platform
# This file contains production-specific overrides with security and performance best practices

# Global configuration
global:
  environment: "prod"
  cloudProvider: "azure"  # Change to your cloud provider
  imageRegistry: "your-registry.azurecr.io"  # Change to your registry
  domain: "workfx-ai.yourdomain.com"  # Change to your domain
  storageClass: "managed-premium"  # Change to your storage class

# WorkFX AI Platform configuration
workfx:
  # API Service configuration
  api:
    enabled: true
    replicas: 3  # Production: multiple replicas for high availability
    
    # Image configuration
    image:
      repository: "workfx/workfx-ai-api"
      tag: "latest"  # Use specific version tag in production
      pullPolicy: "IfNotPresent"
    
    # Resources (production: higher resources)
    resources:
      limits:
        cpu: "4000m"
        memory: "8Gi"
      requests:
        cpu: "2000m"
        memory: "4Gi"
    
    # Production: enable auto-scaling
    autoscaling:
      enabled: true
      minReplicas: 3
      maxReplicas: 10
      targetCPUUtilizationPercentage: 70
      targetMemoryUtilizationPercentage: 80
    
    # Production: enable pod disruption budget
    podDisruptionBudget:
      enabled: true
      minAvailable: 2
    
    # Production: enable network policies
    networkPolicy:
      enabled: true
      ingress: []
      egress: []
    
    # Production: enable pod security standards
    podSecurityStandards:
      enabled: true
      level: "restricted"
      version: "v1.24"
  
  # CDC Service configuration
  cdc:
    enabled: true
    replicas: 2  # Production: multiple replicas for reliability
    
    # Image configuration
    image:
      repository: "workfx/workfx-ai-cdc"
      tag: "latest"  # Use specific version tag in production
      pullPolicy: "IfNotPresent"
    
    # Resources (production: higher resources)
    resources:
      limits:
        cpu: "2000m"
        memory: "4Gi"
      requests:
        cpu: "1000m"
        memory: "2Gi"
    
    # Production: enable auto-scaling
    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 5
      targetCPUUtilizationPercentage: 70
      targetMemoryUtilizationPercentage: 80
  
  # Storage Configuration
  storage:
    type: "azure"  # Change to your storage type
    bucketUriPath: "https://yourstorageaccount.blob.core.windows.net"
    adminBucketName: "workfx-ai-admin-prod"
    userBucketName: "workfx-ai-user-prod"
    publicBucketName: "workfx-ai-public-prod"
    emailBucketName: "workfx-ai-email-prod"
    toolsImageBucketName: "workfx-ai-tools-image-prod"
    uploadFileSizeLimit: 15
    uploadImageFileSizeLimit: 15
    uploadVideoFileSizeLimit: 100
    uploadAudioFileSizeLimit: 100
    filesAccessTimeout: 7200
  
  # Billing Configuration
  billing:
    enabled: true
  
  # Agent Evaluation Configuration
  agentEvaluation:
    enabled: true
  
  # Integrations Configuration
  integrations:
    jinaApiKey: ""  # Set your Jina API key

# Infrastructure services configuration
infrastructure:
  # PostgreSQL configuration
  postgresql:
    enabled: true
    
    # Bitnami PostgreSQL chart configuration
    global:
      postgresql:
        auth:
          postgresPassword: ""  # Set via --set or external secret
          username: "workfx"
          password: ""  # Set via --set or external secret
          database: "workfx_ai"
        primary:
          persistence:
            enabled: true
            size: "100Gi"  # Production: larger storage
            storageClass: "managed-premium"
        readReplicas:
          enabled: true  # Production: enable read replicas
          replicaCount: 2
          persistence:
            enabled: true
            size: "100Gi"
            storageClass: "managed-premium"
  
  # Redis configuration
  redis:
    enabled: true
    
    # Bitnami Redis chart configuration
    auth:
      enabled: true
      password: ""  # Set via --set or external secret
    master:
      persistence:
        enabled: true
        size: "50Gi"  # Production: larger storage
        storageClass: "managed-premium"
    replica:
      enabled: true  # Production: enable replicas
      replicaCount: 2
      persistence:
        enabled: true
        size: "50Gi"
        storageClass: "managed-premium"
  
  # Kafka configuration
  kafka:
    enabled: true
    
    # Bitnami Kafka chart configuration
    auth:
      clientProtocol: plaintext  # Change to SASL_SSL for production security
      interBrokerProtocol: plaintext
      tls:
        enabled: false  # Enable for production security
    zookeeper:
      enabled: true
      persistence:
        enabled: true
        size: "20Gi"
        storageClass: "managed-premium"
    persistence:
      enabled: true
      size: "50Gi"  # Production: larger storage
      storageClass: "managed-premium"
    
    # Kafka topics and consumer configuration
    topics:
      documentChunks: "postgres.public.document_chunks"
      agents: "postgres.public.agents"
    consumerGroupPrefix: "workfx-ai"
  
  # Elasticsearch configuration
  elasticsearch:
    enabled: true
    
    # Bitnami Elasticsearch chart configuration
    master:
      replicas: 3  # Production: multiple master nodes
      persistence:
        enabled: true
        size: "20Gi"
        storageClass: "managed-premium"
    data:
      replicas: 3  # Production: multiple data nodes
      persistence:
        enabled: true
        size: "100Gi"  # Production: larger storage
        storageClass: "managed-premium"
    kibana:
      enabled: true
      persistence:
        enabled: true
        size: "5Gi"
        storageClass: "managed-premium"
  
  # AKHQ (Kafka Management UI) configuration
  akhq:
    enabled: true
    
    # AKHQ chart configuration
    config:
      akhq:
        connections:
          docker-kafka-server:
            properties:
              bootstrap.servers: "{{ .Release.Name }}-kafka:9092"

# Application configuration
config:
  # Core application settings
  environment: "prod"
  cloudProvider: "azure"  # Change to your cloud provider
  kaName: "wfx"
  enableOtel: true
  logLevel: "INFO"  # Production: use INFO level
  
  # Model configuration
  models:
    embedding:
      provider: "azure_openai"  # Change to your provider
      name: "text-embedding-ada-002"
      apiKey: ""  # Set via external secret
      baseUrl: ""
    rerank:
      provider: "azure_openai"  # Change to your provider
      name: "text-embedding-ada-002"
      apiKey: ""  # Set via external secret
      baseUrl: ""
    llm:
      provider: "azure_openai"  # Change to your provider
      name: "gpt-4"
      apiKey: ""  # Set via external secret
      baseUrl: ""
  
  # RAG configuration
  rag:
    summaryBoost: "2.0"
    contentBoost: "1.0"
    distilledKnowledgeBoost: "1.5"
    keywordsBoost: "1.0"
    defaultSearchLimit: "10"
    maxSearchLimit: "100"
    defaultVectorK: "10"
    defaultNumCandidates: "100"
    vectorSimilarityThreshold: "0.5"
    rerankTopK: "20"
    rerankScoreThreshold: "0.5"
    searchTimeout: "30.0"
    embeddingTimeout: "10.0"
    enableCaching: "true"
    cacheTtlSeconds: "300"
  
  # Rate limiting configuration (production: more restrictive)
  rateLimit:
    enabled: true
    redisKeyPrefix: "workfx:rate_limit"
    redisKeyExpireBuffer: "10"
    
    # Feature switches
    ipEnabled: true  # Production: enable IP-based rate limiting
    tenantEnabled: true
    agentMessageEnabled: true
    
    # Time windows
    minuteWindow: "60"
    hourWindow: "3600"
    dayWindow: "86400"
    weeklyWindow: "604800"
    monthlyWindow: "2592000"
    
    # Calculation ratios
    minuteLimitRatio: "0.05"
    dailyLimitHours: "16"
    ipTenantRatio: "0.1"
    
    # Global limits (production: reasonable limits)
    globalRequestsPerHour: "50000"
    globalRequestsPerMinute: "5000"
    globalRequestsPerDay: "1000000"
    
    # Tenant limits (production: reasonable limits)
    tenantCapacityMultiplier: "1000"
    defaultTenantRequestsPerHour: "1000"
    defaultTenantRequestsPerMinute: "50"
    defaultTenantRequestsPerDay: "16000"
    
    # IP limits (production: reasonable limits)
    ipRequestsPerHour: "2000"
    ipRequestsPerMinute: "100"
    ipRequestsPerDay: "32000"
    
    # Agent invoke limits
    agentInvokeRequestsPerHour: "1000"
    agentInvokeRequestsPerMinute: "50"
    agentInvokeRequestsPerDay: "16000"
    
    # External API limits
    externalApiRequestsPerHour: "150"
    externalApiRequestsPerMinute: "10"
    externalApiRequestsPerDay: "2400"
    
    # KA tenant benefits
    kaTenantMultiplier: "5"
    kaTenantBypassRateLimit: false  # Production: don't bypass rate limiting
  
  # URL Extractor configuration
  urlExtractor:
    sitemapMaxSize: "10485760"
    sitemapTimeout: "15"
    maxSitemapIndexSize: "100"
    jinaBaseUrl: "https://r.jina.ai/"
    jinaTimeout: "30"
    enableSitemap: true
    enableProvider: true
    enableDuplicateRemoval: true

# Secret Configuration
secrets:
  create: true
  
  # Database Configuration (pg-secret)
  database:
    secret_id: "pg-secret"
    host: "{{ if .Values.infrastructure.postgresql.external.enabled }}{{ .Values.infrastructure.postgresql.external.host }}{{ else }}{{ .Release.Name }}-postgresql{{ end }}"
    port: "{{ if .Values.infrastructure.postgresql.external.enabled }}{{ .Values.infrastructure.postgresql.external.port }}{{ else }}5432{{ end }}"
    username: "{{ if .Values.infrastructure.postgresql.external.enabled }}{{ .Values.infrastructure.postgresql.external.username }}{{ else }}{{ .Values.infrastructure.postgresql.global.postgresql.auth.username }}{{ end }}"
    password: "{{ if .Values.infrastructure.postgresql.external.enabled }}{{ .Values.infrastructure.postgresql.external.password }}{{ else }}{{ .Values.infrastructure.postgresql.global.postgresql.auth.password }}{{ end }}"
    database: "{{ if .Values.infrastructure.postgresql.external.enabled }}{{ .Values.infrastructure.postgresql.external.database }}{{ else }}{{ .Values.infrastructure.postgresql.global.postgresql.auth.database }}{{ end }}"
  
  # Redis Configuration (tp-redis-secret)
  redis:
    secret_id: "tp-redis-secret"
    redis_host: "{{ if .Values.infrastructure.redis.external.enabled }}{{ .Values.infrastructure.redis.external.host }}{{ else }}{{ .Release.Name }}-redis-master{{ end }}"
    redis_port: "{{ if .Values.infrastructure.redis.external.enabled }}{{ .Values.infrastructure.redis.external.port }}{{ else }}6379{{ end }}"
    redis_password: "{{ if .Values.infrastructure.redis.external.enabled }}{{ .Values.infrastructure.redis.external.password }}{{ else }}{{ .Values.infrastructure.redis.auth.password }}{{ end }}"
    redis_db: "{{ if .Values.infrastructure.redis.external.enabled }}{{ .Values.infrastructure.redis.external.database }}{{ else }}0{{ end }}"
    redis_use_ssl: "false"
  
  # Elasticsearch Configuration (es-secret)
  elasticsearch:
    secret_id: "es-secret"
    host: "{{ if .Values.infrastructure.elasticsearch.external.enabled }}{{ .Values.infrastructure.elasticsearch.external.host }}{{ else }}{{ .Release.Name }}-elasticsearch{{ end }}"
    port: "{{ if .Values.infrastructure.elasticsearch.external.enabled }}{{ .Values.infrastructure.elasticsearch.external.port }}{{ else }}9200{{ end }}"
    username: "{{ if .Values.infrastructure.elasticsearch.external.enabled }}{{ .Values.infrastructure.elasticsearch.external.username }}{{ else }}{{ .Values.infrastructure.elasticsearch.auth.username }}{{ end }}"
    password: "{{ if .Values.infrastructure.elasticsearch.external.enabled }}{{ .Values.infrastructure.elasticsearch.external.password }}{{ else }}{{ .Values.infrastructure.elasticsearch.auth.password }}{{ end }}"
    use_ssl: "{{ if .Values.infrastructure.elasticsearch.external.enabled }}{{ .Values.infrastructure.elasticsearch.external.useSsl }}{{ else }}false{{ end }}"
    cluster_url: "{{ if .Values.infrastructure.elasticsearch.external.enabled }}{{ .Values.infrastructure.elasticsearch.external.clusterUrl }}{{ else }}{{ end }}"
  
  # Kafka Configuration (wfx-kafka-secret)
  kafka:
    secret_id: "wfx-kafka-secret"
    bootstrap_servers: "{{ if .Values.infrastructure.kafka.external.enabled }}{{ .Values.infrastructure.kafka.external.bootstrapServers }}{{ else }}{{ .Release.Name }}-kafka:9092{{ end }}"
    security_protocol: "{{ if .Values.infrastructure.kafka.external.enabled }}{{ .Values.infrastructure.kafka.external.securityProtocol }}{{ else }}PLAINTEXT{{ end }}"
    document_chunks_topic: "{{ .Values.infrastructure.kafka.topics.documentChunks }}"
    agents_topic: "{{ .Values.infrastructure.kafka.topics.agents }}"
    consumer_group_prefix: "{{ .Values.infrastructure.kafka.consumerGroupPrefix }}"
    username: "{{ if .Values.infrastructure.kafka.external.enabled }}{{ .Values.infrastructure.kafka.external.username }}{{ else }}{{ end }}"
    password: "{{ if .Values.infrastructure.kafka.external.enabled }}{{ .Values.infrastructure.kafka.external.password }}{{ end }}"
  
  # JWT Configuration (jwt-secret)
  jwt:
    secret_id: "jwt-secret"
    admin_jwt_key: ""  # Set via external secret
    admin_jwt_issuer: "https://workfx.ai"
    admin_jwt_audience: "https://workfx.ai"
    ai_jwt_key: ""  # Set via external secret
    ai_jwt_issuer: "https://workfx.ai"
    ai_jwt_audience: "https://workfx.ai"
  
  # Security Configuration (secret-key)
  security:
    secret_id: "secret-key"
    data_secret: ""  # Set via external secret
    jina_api_key: ""  # Set via external secret
  
  # Model Hosting Configuration (wfx-hosted-models)
  model_hosting:
    secret_id: "wfx-hosted-models"
  
  # Integration Configuration (wfx-hosted-integrations)
  integrations:
    secret_id: "wfx-hosted-integrations"
  
  # Payment Gateway Configuration (wfx-payment-gateway-secret)
  payment_gateway:
    secret_id: "wfx-payment-gateway-secret"
    stripe:
      api_key: ""  # Set via external secret
      webhook_secret: ""  # Set via external secret
      publishable_key: ""  # Set via external secret
  
  # Agent Evaluation Configuration (wfx-agent-evaluation-secret)
  agent_evaluation:
    secret_id: "wfx-agent-evaluation-secret"
    endpoint: ""  # Set your agent evaluation endpoint
    api_key: ""  # Set via external secret
  
  # Azure Storage Connection (azure-storage-connection-string)
  azure_storage:
    secret_id: "azure-storage-connection-string"
    azure_connection_string: ""  # Set via external secret
  
  # Internal API Keys (internal-service-key)
  internal_api_keys:
    secret_id: "internal-service-key"
    internal_api_keys: "[]"  # Set via external secret
